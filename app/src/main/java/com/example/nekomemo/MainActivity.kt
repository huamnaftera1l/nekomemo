package com.example.nekomemo

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.Image
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.background
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.layout.ContentScale
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.nekomemo.ui.screens.SettingsScreen
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.withStyle
import java.util.regex.Pattern
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            NekoMemoTheme {
                val context = LocalContext.current
                val securePrefs = remember { SecurePreferencesManager(context) }
                val viewModel: VocabularyViewModel = viewModel {
                    VocabularyViewModel(securePrefs)
                }

                NekoMemoApp(viewModel)
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NekoMemoApp(viewModel: VocabularyViewModel) {
    val uiState by viewModel.uiState.collectAsState()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Áå´Áå´ËÉåÂçïËØç Beta v0.1") },
                actions = {
                    IconButton(onClick = { viewModel.navigateToScreen(Screen.Settings) }) {
                        Icon(Icons.Default.Settings, contentDescription = "ËÆæÁΩÆ")
                    }
                }
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when (uiState.currentScreen) {
                Screen.Home -> HomeScreen(viewModel)
                Screen.Settings -> SettingsScreen(viewModel)
                Screen.Story -> StoryScreen(viewModel)
                Screen.Quiz -> QuizScreen(viewModel)
                Screen.Result -> ResultScreen(viewModel)
                Screen.WrongAnswers -> WrongAnswersScreen(viewModel)
                Screen.StoryHistory -> StoryHistoryScreen(viewModel)
                Screen.About -> AboutScreen(viewModel)
            }

            if (uiState.isLoading) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Card(
                        modifier = Modifier.padding(32.dp)
                    ) {
                        Column(
                            modifier = Modifier.padding(24.dp),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            CircularProgressIndicator()
                            Spacer(modifier = Modifier.height(16.dp))
                            Text("Ê≠£Âú®ÁîüÊàêÊïÖ‰∫ã...")
                        }
                    }
                }
            }

            uiState.error?.let { error ->
                LaunchedEffect(error) {
                    // Ëá™Âä®Ê∏ÖÈô§ÈîôËØØÁä∂ÊÄÅ
                    kotlinx.coroutines.delay(3000)
                    viewModel.clearError()
                }
                
                // ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    colors = CardDefaults.cardColors(containerColor = Color.Red.copy(alpha = 0.1f))
                ) {
                    Row(
                        modifier = Modifier.padding(16.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            Icons.Default.Warning,
                            contentDescription = null,
                            tint = Color.Red
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = error,
                            color = Color.Red
                        )
                    }
                }
            }
            
            // Token‰ΩøÁî®ÊÉÖÂÜµÂºπÁ™ó
            uiState.showTokenUsage?.let { tokenUsage ->
                TokenUsageDialog(
                    tokenUsage = tokenUsage,
                    onDismiss = { viewModel.hideTokenUsage() }
                )
            }
        }
    }
}

@Composable
fun HomeScreen(viewModel: VocabularyViewModel) {
    val uiState by viewModel.uiState.collectAsState()
    var wordInput by remember { mutableStateOf("") }
    
    // ÂΩìuiState.userInputWordsÊîπÂèòÊó∂ÔºåÊõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅ
    LaunchedEffect(uiState.userInputWords) {
        if (wordInput.isEmpty() || wordInput == "abandon\nfragile\ncompel\ndeceive\nobscure\npledge\nweary\nvivid\nprevail\nembrace") {
            wordInput = uiState.userInputWords
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Card {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "üìù ËæìÂÖ•ÂçïËØçÂàóË°®",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text("ËØ∑ËæìÂÖ•Ë¶ÅÂ≠¶‰π†ÁöÑÂçïËØçÔºåÊØèË°å‰∏Ä‰∏™:")
                Spacer(modifier = Modifier.height(8.dp))

                OutlinedTextField(
                    value = wordInput,
                    onValueChange = { 
                        wordInput = it
                        viewModel.updateUserInputWords(it)
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(200.dp),
                    placeholder = { Text("ËæìÂÖ•ÂçïËØç...") }
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.End
                ) {
                    OutlinedButton(
                        onClick = {
                            wordInput = ""
                            viewModel.clearUserInputWords()
                        },
                        modifier = Modifier.height(36.dp)
                    ) {
                        Icon(
                            Icons.Default.Clear,
                            contentDescription = "Ê∏ÖÁ©∫",
                            modifier = Modifier.size(16.dp)
                        )
                        Spacer(modifier = Modifier.width(4.dp))
                        Text("Ê∏ÖÁ©∫", style = MaterialTheme.typography.bodySmall)
                    }
                }
            }
        }

        Button(
            onClick = {
                val words = wordInput.split("\n", ",")
                    .map { it.trim() }
                    .filter { it.isNotEmpty() }
                if (words.size >= 2) {
                    viewModel.generateStory(words)
                }
            },
            modifier = Modifier.fillMaxWidth()
        ) {
            Icon(Icons.Default.PlayArrow, contentDescription = null)
            Spacer(modifier = Modifier.width(8.dp))
            Text("‚úçÔ∏èÔ∏èÁîüÊàêÊïÖ‰∫ã")
        }

        OutlinedButton(
            onClick = { viewModel.loadDemoStory() },
            modifier = Modifier.fillMaxWidth()
        ) {
            Icon(Icons.Default.PlayArrow, contentDescription = null)
            Spacer(modifier = Modifier.width(8.dp))
            Text("‰ΩøÁî®DemoÊïÖ‰∫ã")
        }
        
        OutlinedButton(
            onClick = { viewModel.navigateToScreen(Screen.StoryHistory) },
            modifier = Modifier.fillMaxWidth()
        ) {
            Icon(Icons.Default.List, contentDescription = null)
            Spacer(modifier = Modifier.width(8.dp))
            Text("üìö ÊïÖ‰∫ãÂéÜÂè≤")
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Card(
            colors = CardDefaults.cardColors(
                containerColor = Color(0xFFFFF3E0)
            )
        ) {
            Column(
                modifier = Modifier.padding(12.dp)
            ) {
                Text(
                    text = "‚ö†Ô∏è ÂÖçË¥£Â£∞Êòé",
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFFF8F00)
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Êú¨Â∫îÁî®ÁîüÊàêÁöÑÂÜÖÂÆπÁî±AIËá™Âä®ÁîüÊàêÔºå‰∏ç‰ª£Ë°®ÂºÄÂèëËÄÖÁ´ãÂú∫ÔºåÂºÄÂèëËÄÖ‰∏çÂØπÂÖ∂ÂáÜÁ°ÆÊÄßÂíåÈÄÇÁî®ÊÄßË¥üË¥£„ÄÇ" +
                            "ËØ∑ÂãøËæìÂÖ•Ê∂âÂèäÁßçÊóèÊ≠ßËßÜ„ÄÅÊÅêÊÄñ‰∏ª‰πâ„ÄÅÊîøÊ≤ªÊïèÊÑüÁ≠âËØçËØ≠ÔºåÂê¶ÂàôÂèØËÉΩÂØºËá¥ÁîüÊàêÂ§±Ë¥•ÊàñÁ®ãÂ∫èÂºÇÂ∏∏„ÄÇ\n" +
                            "Âõ†Áî®Êà∑‰∏çÂΩì‰ΩøÁî®Êú¨Â∫îÁî®ÊâÄÈÄ†ÊàêÁöÑ‰ªª‰ΩïÂêéÊûúÔºåÁî±Áî®Êà∑Ëá™Ë°åÊâøÊãÖÂÖ®ÈÉ®Ê≥ïÂæãË¥£‰ªªÔºåÂºÄÂèëËÄÖ‰∏çÂØπÊ≠§ÊâøÊãÖ‰ªª‰ΩïÂΩ¢ÂºèÁöÑÊ≥ïÂæãÊàñËøûÂ∏¶Ë¥£‰ªª„ÄÇ",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color(0xFF666666),
                    lineHeight = 19.sp
                )
            }
        }
    }
}

// ÂØåÊñáÊú¨Ëß£ÊûêÂáΩÊï∞
@Composable
fun parseRichText(text: String): AnnotatedString {
    return buildAnnotatedString {
        val pattern = Pattern.compile("\\*\\*(\\w+)\\*\\*\\s*\\[([^\\]]+)\\]\\s*\\(([^)]+)\\)\\s*\\*([^*]+)\\*")
        val matcher = pattern.matcher(text)
        var lastEnd = 0
        
        while (matcher.find()) {
            // Ê∑ªÂä†ÂâçÈù¢ÁöÑÊôÆÈÄöÊñáÊú¨
            if (matcher.start() > lastEnd) {
                append(text.substring(lastEnd, matcher.start()))
            }
            
            val word = matcher.group(1) ?: ""
            val partOfSpeech = matcher.group(2) ?: ""
            val translation = matcher.group(3) ?: ""
            val contextMeaning = matcher.group(4) ?: ""
            
            // Ê∑ªÂä†Âä†Á≤óÁöÑÂçïËØç
            withStyle(
                style = SpanStyle(
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1976D2)
                )
            ) {
                append(word)
            }
            
            // Ê∑ªÂä†ËØçÊÄßÔºàÂ∞èÂ≠ó‰ΩìÔºåÁ¥´Ëâ≤Ôºâ
            withStyle(
                style = SpanStyle(
                    fontSize = 12.sp,
                    color = Color(0xFF9C27B0)
                )
            ) {
                append(" [$partOfSpeech]")
            }
            
            // Ê∑ªÂä†ÁøªËØëÔºàÁªøËâ≤Ôºâ
            withStyle(
                style = SpanStyle(
                    color = Color(0xFF388E3C)
                )
            ) {
                append(" ($translation)")
            }
            
            // Ê∑ªÂä†‰∏ä‰∏ãÊñáÈáä‰πâÔºàÊñú‰ΩìÔºåÁÅ∞Ëâ≤Ôºâ
            withStyle(
                style = SpanStyle(
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic,
                    color = Color(0xFF757575),
                    fontSize = 14.sp
                )
            ) {
                append(" üí°$contextMeaning")
            }
            
            lastEnd = matcher.end()
        }
        
        // Ê∑ªÂä†Ââ©‰ΩôÁöÑÊñáÊú¨
        if (lastEnd < text.length) {
            append(text.substring(lastEnd))
        }
    }
}

// ÊöÇÊó∂ÁÆÄÂåñÂÖ∂‰ªñÂ±èÂπï

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun StoryScreen(viewModel: VocabularyViewModel) {
    val story by viewModel.currentStory.collectAsState()
    val wordDefinitions by viewModel.wordDefinitions.collectAsState()
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        TopAppBar(
            title = { Text("ÊïÖ‰∫ã") },
            navigationIcon = {
                IconButton(onClick = { viewModel.navigateToScreen(Screen.Home) }) {
                    Icon(Icons.Default.ArrowBack, contentDescription = "ËøîÂõû")
                }
            }
        )
        
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item {
                Card {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "ËÉåÂçïËØçÊïÖ‰∫ã",
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        Text(
                            text = parseRichText(story),
                            style = MaterialTheme.typography.bodyLarge,
                            lineHeight = 24.sp
                        )
                    }
                }
            }
            
            if (wordDefinitions.isNotEmpty()) {
                item {
                    Card {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "üìù ÂçïËØçÂàóË°®",
                                style = MaterialTheme.typography.headlineSmall,
                                fontWeight = FontWeight.Bold
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            
                            wordDefinitions.forEach { wordDef ->
                                Card(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 4.dp),
                                    colors = CardDefaults.cardColors(
                                        containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
                                    )
                                ) {
                                    Column(
                                        modifier = Modifier.padding(12.dp)
                                    ) {
                                        Row(
                                            modifier = Modifier.fillMaxWidth(),
                                            horizontalArrangement = Arrangement.SpaceBetween,
                                            verticalAlignment = Alignment.CenterVertically
                                        ) {
                                            Text(
                                                text = wordDef.word,
                                                fontWeight = FontWeight.Bold,
                                                style = MaterialTheme.typography.bodyLarge
                                            )
                                            
                                            Text(
                                                text = wordDef.partOfSpeech,
                                                style = MaterialTheme.typography.bodySmall,
                                                color = MaterialTheme.colorScheme.primary,
                                                fontWeight = FontWeight.Medium
                                            )
                                        }
                                        
                                        Spacer(modifier = Modifier.height(4.dp))
                                        
                                        Text(
                                            text = wordDef.translation,
                                            style = MaterialTheme.typography.bodyMedium,
                                            fontWeight = FontWeight.Medium
                                        )
                                        
                                        wordDef.contextMeaning?.let { context ->
                                            Spacer(modifier = Modifier.height(4.dp))
                                            Text(
                                                text = "üí° $context",
                                                style = MaterialTheme.typography.bodySmall,
                                                color = MaterialTheme.colorScheme.secondary,
                                                fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                item {
                    Button(
                        onClick = { viewModel.startQuiz() },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Icon(Icons.Default.PlayArrow, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text("üß† ÂºÄÂßãÊµãÈ™å")
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuizScreen(viewModel: VocabularyViewModel) {
    val quizQuestions by viewModel.quizQuestions.collectAsState()
    val currentQuizIndex by viewModel.currentQuizIndex.collectAsState()
    val quizScore by viewModel.quizScore.collectAsState()
    
    if (quizQuestions.isEmpty()) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Text("ÊµãÈ™åÈ¢òÁõÆÂä†ËΩΩ‰∏≠...")
        }
        return
    }
    
    val currentQuestion = quizQuestions[currentQuizIndex]
    val progress = (currentQuizIndex + 1).toFloat() / quizQuestions.size
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        TopAppBar(
            title = { Text("üß† ÊµãÈ™å (${currentQuizIndex + 1}/${quizQuestions.size})") },
            navigationIcon = {
                IconButton(onClick = { viewModel.navigateToScreen(Screen.Story) }) {
                    Icon(Icons.Default.ArrowBack, contentDescription = "ËøîÂõû")
                }
            }
        )
        
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // ËøõÂ∫¶Êù°
            LinearProgressIndicator(
                progress = progress,
                modifier = Modifier.fillMaxWidth()
            )
            
            Text(
                text = "ÂΩìÂâçÂæóÂàÜ: $quizScore/${currentQuizIndex}",
                style = MaterialTheme.typography.bodyMedium
            )
            
            Card {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = currentQuestion.question,
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    currentQuestion.options.forEachIndexed { index, option ->
                        OutlinedButton(
                            onClick = { viewModel.submitAnswer(index) },
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp)
                        ) {
                            Text(
                                text = "${('A' + index)}.  $option",
                                style = MaterialTheme.typography.bodyLarge
                            )
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ResultScreen(viewModel: VocabularyViewModel) {
    val quizQuestions by viewModel.quizQuestions.collectAsState()
    val quizScore by viewModel.quizScore.collectAsState()
    val wrongAnswers by viewModel.wrongAnswers.collectAsState()
    
    if (quizQuestions.isEmpty()) return
    
    val totalQuestions = quizQuestions.size
    val percentage = (quizScore.toDouble() / totalQuestions * 100).toInt()
    val result = QuizResult(totalQuestions, quizScore, percentage.toDouble())
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        TopAppBar(
            title = { Text("üéØ ÊµãÈ™åÁªìÊûú") },
            navigationIcon = {
                IconButton(onClick = { viewModel.navigateToScreen(Screen.Home) }) {
                    Icon(Icons.Default.Home, contentDescription = "ÂõûÂà∞È¶ñÈ°µ")
                }
            }
        )
        
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(32.dp))
            
            Card {
                Column(
                    modifier = Modifier.padding(24.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "ÊµãÈ™åÂÆåÊàêÔºÅ",
                        style = MaterialTheme.typography.headlineLarge,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(24.dp))
                    
                    Text(
                        text = "$percentage%",
                        style = MaterialTheme.typography.displayLarge,
                        fontWeight = FontWeight.Bold,
                        color = when {
                            percentage >= 90 -> Color(0xFF4CAF50)
                            percentage >= 70 -> Color(0xFFFF9800)
                            else -> Color(0xFFf44336)
                        }
                    )
                    
                    Text(
                        text = "$quizScore / $totalQuestions È¢òÊ≠£Á°Æ",
                        style = MaterialTheme.typography.bodyLarge
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Text(
                        text = result.evaluation,
                        style = MaterialTheme.typography.headlineSmall,
                        textAlign = TextAlign.Center
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(32.dp))
            
            // Â¶ÇÊûúÊúâÈîôÈ¢òÔºåÊòæÁ§∫ÈîôÈ¢òÊú¨ÊåâÈíÆ
            if (wrongAnswers.isNotEmpty()) {
                Button(
                    onClick = { viewModel.navigateToScreen(Screen.WrongAnswers) },
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFFFF6B6B)
                    )
                ) {
                    Icon(Icons.Default.Warning, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("üìù Êü•ÁúãÈîôÈ¢òÊú¨ (${wrongAnswers.size}‰∏™ÈîôÈ¢ò)")
                }
                
                Spacer(modifier = Modifier.height(16.dp))
            }
            
            Row(
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                OutlinedButton(
                    onClick = { viewModel.navigateToScreen(Screen.Story) },
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Default.Refresh, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("ÈáçÊñ∞Â≠¶‰π†")
                }
                
                Button(
                    onClick = { viewModel.navigateToScreen(Screen.Home) },
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Default.Home, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("ÂõûÂà∞È¶ñÈ°µ")
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun WrongAnswersScreen(viewModel: VocabularyViewModel) {
    val wrongAnswers by viewModel.wrongAnswers.collectAsState()
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        TopAppBar(
            title = { Text("‚ùå ÈîôÈ¢òÊú¨") },
            navigationIcon = {
                IconButton(onClick = { viewModel.navigateToScreen(Screen.Result) }) {
                    Icon(Icons.Default.ArrowBack, contentDescription = "ËøîÂõû")
                }
            }
        )
        
        if (wrongAnswers.isEmpty()) {
            // Ê≤°ÊúâÈîôÈ¢òÊó∂ÁöÑÊòæÁ§∫
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    Text(
                        text = "üéâ",
                        style = MaterialTheme.typography.displayLarge
                    )
                    Text(
                        text = "ÊÅ≠ÂñúÔºÅÊ≤°ÊúâÈîôÈ¢òÔºÅ",
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "‰Ω†Â∑≤ÁªèÂÆåÂÖ®ÊéåÊè°‰∫ÜÊâÄÊúâÂçïËØçÔºÅ",
                        style = MaterialTheme.typography.bodyLarge,
                        textAlign = TextAlign.Center
                    )
                }
            }
        } else {
            // ÊúâÈîôÈ¢òÊó∂ÁöÑÊòæÁ§∫
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                item {
                    Card(
                        colors = CardDefaults.cardColors(
                            containerColor = Color(0xFFFFEBEE)
                        )
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "üìä ÈîôÈ¢òÁªüËÆ°",
                                style = MaterialTheme.typography.headlineSmall,
                                fontWeight = FontWeight.Bold
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = "ÂÖ±Á≠îÈîô ${wrongAnswers.size} ‰∏™ÂçïËØç",
                                style = MaterialTheme.typography.bodyMedium
                            )
                        }
                    }
                }
                
                wrongAnswers.forEach { wrongAnswer ->
                    item {
                        Card(
                            colors = CardDefaults.cardColors(
                                containerColor = Color(0xFFFFF3E0)
                            )
                        ) {
                            Column(
                                modifier = Modifier.padding(16.dp)
                            ) {
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Text(
                                        text = wrongAnswer.word,
                                        fontWeight = FontWeight.Bold,
                                        style = MaterialTheme.typography.headlineSmall,
                                        color = Color(0xFFD84315)
                                    )
                                    
                                    Text(
                                        text = wrongAnswer.partOfSpeech,
                                        style = MaterialTheme.typography.bodySmall,
                                        color = MaterialTheme.colorScheme.primary,
                                        fontWeight = FontWeight.Medium
                                    )
                                }
                                
                                Spacer(modifier = Modifier.height(8.dp))
                                
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Icon(
                                        Icons.Default.Close,
                                        contentDescription = null,
                                        tint = Color.Red,
                                        modifier = Modifier.size(16.dp)
                                    )
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text(
                                        text = "‰Ω†ÁöÑÁ≠îÊ°àÔºö${wrongAnswer.userAnswer}",
                                        style = MaterialTheme.typography.bodyMedium,
                                        color = Color.Red
                                    )
                                }
                                
                                Spacer(modifier = Modifier.height(4.dp))
                                
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Icon(
                                        Icons.Default.Check,
                                        contentDescription = null,
                                        tint = Color.Green,
                                        modifier = Modifier.size(16.dp)
                                    )
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text(
                                        text = "Ê≠£Á°ÆÁ≠îÊ°àÔºö${wrongAnswer.correctTranslation}",
                                        style = MaterialTheme.typography.bodyMedium,
                                        fontWeight = FontWeight.Bold,
                                        color = Color.Green
                                    )
                                }
                                
                                wrongAnswer.contextMeaning?.let { context ->
                                    Spacer(modifier = Modifier.height(8.dp))
                                    Text(
                                        text = "üí° $context",
                                        style = MaterialTheme.typography.bodySmall,
                                        color = MaterialTheme.colorScheme.secondary,
                                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun StoryHistoryScreen(viewModel: VocabularyViewModel) {
    val savedStories by viewModel.savedStories.collectAsState()
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        TopAppBar(
            title = { Text("üìö ÊïÖ‰∫ãÂéÜÂè≤") },
            navigationIcon = {
                IconButton(onClick = { viewModel.navigateToScreen(Screen.Home) }) {
                    Icon(Icons.Default.ArrowBack, contentDescription = "ËøîÂõû")
                }
            }
        )
        
        if (savedStories.isEmpty()) {
            // Ê≤°Êúâ‰øùÂ≠òÁöÑÊïÖ‰∫ãÊó∂ÁöÑÊòæÁ§∫
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    Text(
                        text = "üìñ",
                        style = MaterialTheme.typography.displayLarge
                    )
                    Text(
                        text = "ËøòÊ≤°Êúâ‰øùÂ≠òÁöÑÊïÖ‰∫ã",
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "ÁîüÊàêÊñ∞ÊïÖ‰∫ãÂêé‰ºöËá™Âä®‰øùÂ≠òÂà∞ËøôÈáå",
                        style = MaterialTheme.typography.bodyLarge,
                        textAlign = TextAlign.Center
                    )
                }
            }
        } else {
            // Êúâ‰øùÂ≠òÁöÑÊïÖ‰∫ãÊó∂ÁöÑÊòæÁ§∫
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                item {
                    Card(
                        colors = CardDefaults.cardColors(
                            containerColor = Color(0xFFE3F2FD)
                        )
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "üìä ÊïÖ‰∫ãÁªüËÆ°",
                                style = MaterialTheme.typography.headlineSmall,
                                fontWeight = FontWeight.Bold
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = "ÂÖ±‰øùÂ≠ò‰∫Ü ${savedStories.size} ‰∏™ÊïÖ‰∫ã",
                                style = MaterialTheme.typography.bodyMedium
                            )
                        }
                    }
                }
                
                savedStories.forEach { story ->
                    item {
                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            colors = CardDefaults.cardColors(
                                containerColor = Color(0xFFFFF8E1)
                            )
                        ) {
                            Column(
                                modifier = Modifier.padding(16.dp)
                            ) {
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.Top
                                ) {
                                    Column(
                                        modifier = Modifier.weight(1f)
                                    ) {
                                        Text(
                                            text = story.title,
                                            fontWeight = FontWeight.Bold,
                                            style = MaterialTheme.typography.bodyLarge
                                        )
                                        Spacer(modifier = Modifier.height(4.dp))
                                        Text(
                                            text = "‰∏ªÈ¢ò: ${story.theme}",
                                            style = MaterialTheme.typography.bodySmall,
                                            color = Color(0xFF666666)
                                        )
                                        Text(
                                            text = "AI: ${story.llmProvider}",
                                            style = MaterialTheme.typography.bodySmall,
                                            color = Color(0xFF666666)
                                        )
                                        Text(
                                            text = formatDate(story.createdAt),
                                            style = MaterialTheme.typography.bodySmall,
                                            color = Color(0xFF666666)
                                        )
                                    }
                                    
                                    IconButton(
                                        onClick = { viewModel.deleteStory(story.id) }
                                    ) {
                                        Icon(
                                            Icons.Default.Delete,
                                            contentDescription = "Âà†Èô§",
                                            tint = Color.Red
                                        )
                                    }
                                }
                                
                                Spacer(modifier = Modifier.height(8.dp))
                                
                                Text(
                                    text = story.content.take(100) + if (story.content.length > 100) "..." else "",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = Color(0xFF666666),
                                    maxLines = 2
                                )
                                
                                Spacer(modifier = Modifier.height(12.dp))
                                
                                Button(
                                    onClick = { viewModel.loadStory(story) },
                                    modifier = Modifier.fillMaxWidth()
                                ) {
                                    Icon(Icons.Default.PlayArrow, contentDescription = null)
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text("Êü•ÁúãÊïÖ‰∫ã")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

fun formatDate(timestamp: Long): String {
    val sdf = SimpleDateFormat("MM/dd HH:mm", Locale.getDefault())
    return sdf.format(Date(timestamp))
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AboutScreen(viewModel: VocabularyViewModel) {
    val uiState by viewModel.uiState.collectAsState()
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        TopAppBar(
            title = { Text("ÂÖ≥‰∫éÁå´Áå´ËÉåÂçïËØç Beta v0.1") },
            navigationIcon = {
                IconButton(onClick = { viewModel.navigateToScreen(Screen.Settings) }) {
                    Icon(Icons.Default.ArrowBack, contentDescription = "ËøîÂõû")
                }
            }
        )
        
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            
            item {
                Card {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "App Intro",
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "„ÄåÁå´Áå´ËÉåÂçïËØç„ÄçÊòØÊàëÁöÑAndroidÂºÄÂèëÁªÉÊâã‰πã‰ΩúÔºåÂèóÊàëÁöÑÂ•≥ÂèãÁöÑÂêØÂèë„ÄÇÈÄöËøáAIÁîüÊàêÊúâË∂£ÁöÑÊïÖ‰∫ãÊù•Â∏ÆÂä©ËÆ∞ÂøÜÂçïËØçÔºåËÆ©Â≠¶‰π†Êõ¥Âä†ÁîüÂä®ÊúâË∂£ÔºÅ",
                            style = MaterialTheme.typography.bodyMedium,
                            lineHeight = 20.sp
                        )
                    }
                }
            }

            /*
            item {
                Card {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "‚ú® ‰∏ªË¶ÅÂäüËÉΩ",
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        
                        val features = listOf(
                            "üìö AIÊô∫ËÉΩÊïÖ‰∫ãÁîüÊàê",
                            "üéØ ‰∏™ÊÄßÂåñÂçïËØçÊµãÈ™å",
                            "üìù ÈîôÈ¢òÊú¨Â§ç‰π†Á≥ªÁªü",
                            "üìñ ÊïÖ‰∫ãÂéÜÂè≤ËÆ∞ÂΩï",
                            "üîß Â§öÁßçAIÊ®°ÂûãÊîØÊåÅ",
                            "üíæ Êï∞ÊçÆÂÆâÂÖ®Âä†ÂØÜÂ≠òÂÇ®"
                        )
                        
                        features.forEach { feature ->
                            Row(
                                modifier = Modifier.padding(vertical = 2.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = "‚Ä¢ $feature",
                                    style = MaterialTheme.typography.bodyMedium
                                )
                            }
                        }
                    }
                }
            }

             */
            
            item {
                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFFFF3E0)
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "ÊâìËµè",
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFFFF6B6B)
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "Â¶ÇÊûú‰Ω†ÂñúÊ¨¢„ÄåÁå´Áå´ËÉåÂçïËØç„ÄçÔºåÂèØ‰ª•ËØ∑ÊàëÂñù‰∏ÄÊùØËúúÈõ™ÂÜ∞ÂüéÂêóÔºüThx!",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center,
                            lineHeight = 20.sp
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        // ÊâìËµèÊåâÈíÆ
                        Row(
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            OutlinedButton(
                                onClick = { viewModel.showQRCode(QRCodeType.WECHAT) },
                                modifier = Modifier.weight(1f)
                            ) {
                                Spacer(modifier = Modifier.width(4.dp))
                                Text("ÂæÆ‰ø°", style = MaterialTheme.typography.bodySmall)
                            }
                            
                            OutlinedButton(
                                onClick = { viewModel.showQRCode(QRCodeType.ZELLE) },
                                modifier = Modifier.weight(1f)
                            ) {
                                Spacer(modifier = Modifier.width(4.dp))
                                Text("Zelle", style = MaterialTheme.typography.bodySmall)
                            }
                            
                            OutlinedButton(
                                onClick = { viewModel.showQRCode(QRCodeType.PAYPAL) },
                                modifier = Modifier.weight(1f)
                            ) {
                                Spacer(modifier = Modifier.width(4.dp))
                                Text("PayPal", style = MaterialTheme.typography.bodySmall)
                            }
                        }
                        
                        Spacer(modifier = Modifier.height(12.dp))
                        Text(
                            text = "ÁÇπÂáª‰∏äÊñπÊåâÈíÆÊü•ÁúãÂØπÂ∫îÁöÑÊâìËµè‰∫åÁª¥Á†Å",
                            style = MaterialTheme.typography.bodySmall,
                            color = Color(0xFF999999),
                            textAlign = TextAlign.Center
                        )
                    }
                }
            }
            
            item {
                Card(
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(20.dp)
                    ) {
                        Text(
                            text = "üìß ËÅîÁ≥ªÂºÄÂèëËÄÖ",
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(12.dp))
                        Text(
                            text = "Email: liu.zl_6@outlook.com" +
                                    "\n" +
                                    "GitHub: huamnaftera1l",
                            style = MaterialTheme.typography.bodyMedium,
                            lineHeight = 22.sp
                        )
                    }
                }
            }
            
            item {
                Spacer(modifier = Modifier.height(32.dp))
                Text(
                    text = "ÊÑüË∞¢ÊÇ®‰ΩøÁî®NekoMemoÔºÅüê±‚ù§Ô∏è",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color(0xFF999999),
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        }
    }
    
    // ‰∫åÁª¥Á†ÅÂºπÁ™ó
    uiState.showQRCode?.let { qrType ->
        QRCodeDialog(
            qrType = qrType,
            onDismiss = { viewModel.hideQRCode() }
        )
    }
}

@Composable
fun TokenUsageDialog(
    tokenUsage: TokenUsage,
    onDismiss: () -> Unit
) {
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight(),
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(
                containerColor = Color.White
            )
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "üìä Token ‰ΩøÁî®ÊÉÖÂÜµ",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF1976D2)
                    )
                    IconButton(onClick = onDismiss) {
                        Icon(
                            Icons.Default.Close,
                            contentDescription = "ÂÖ≥Èó≠",
                            tint = Color.Gray
                        )
                    }
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                // Token‰ΩøÁî®ÁªüËÆ°
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFF3F4F6)
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        TokenUsageRow("ËæìÂÖ• Tokens", tokenUsage.promptTokens, Color(0xFF10B981))
                        Spacer(modifier = Modifier.height(8.dp))
                        TokenUsageRow("ËæìÂá∫ Tokens", tokenUsage.completionTokens, Color(0xFF3B82F6))
                        Spacer(modifier = Modifier.height(8.dp))
                        Divider()
                        Spacer(modifier = Modifier.height(8.dp))
                        TokenUsageRow("ÊÄªËÆ° Tokens", tokenUsage.totalTokens, Color(0xFF6366F1), isTotal = true)
                    }
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = "ÊïÖ‰∫ãÁîüÊàêÂÆåÊàêÔºÅ",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color(0xFF666666),
                    textAlign = TextAlign.Center
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Button(
                    onClick = onDismiss,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Â•ΩÁöÑ")
                }
            }
        }
    }
}

@Composable
fun TokenUsageRow(
    label: String,
    value: Int,
    color: Color,
    isTotal: Boolean = false
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = label,
            style = if (isTotal) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium,
            fontWeight = if (isTotal) FontWeight.Bold else FontWeight.Normal
        )
        Text(
            text = value.toString(),
            style = if (isTotal) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Bold,
            color = color
        )
    }
}

@Composable
fun QRCodeDialog(
    qrType: QRCodeType,
    onDismiss: () -> Unit
) {
    val (title, drawableRes) = when (qrType) {
        QRCodeType.WECHAT -> "ÂæÆ‰ø°ÊîØ‰ªò" to R.drawable.wechat
        QRCodeType.ZELLE -> "ZelleËΩ¨Ë¥¶" to R.drawable.zelle
        QRCodeType.PAYPAL -> "PayPalÊîØ‰ªò" to R.drawable.paypal
    }
    
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight(),
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(
                containerColor = Color.White
            )
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = title,
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                    IconButton(onClick = onDismiss) {
                        Icon(
                            Icons.Default.Close,
                            contentDescription = "ÂÖ≥Èó≠",
                            tint = Color.Gray
                        )
                    }
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Image(
                    painter = painterResource(id = drawableRes),
                    contentDescription = "$title ‰∫åÁª¥Á†Å",
                    modifier = Modifier
                        .size(250.dp)
                        .background(
                            Color.White,
                            RoundedCornerShape(8.dp)
                        ),
                    contentScale = ContentScale.Fit
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = "Êâ´Êèè‰∫åÁª¥Á†ÅËøõË°åÊâìËµè",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color(0xFF666666),
                    textAlign = TextAlign.Center
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Text(
                    text = "ÊÑüË∞¢ÊÇ®ÁöÑÊîØÊåÅÔºÅüôè",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color(0xFF999999),
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun NekoMemoTheme(content: @Composable () -> Unit) {
    MaterialTheme(
        colorScheme = lightColorScheme(
            primary = Color(0xFF2E86AB),
            secondary = Color(0xFFA23B72),
            tertiary = Color(0xFFF18F01)
        ),
        content = content
    )
}